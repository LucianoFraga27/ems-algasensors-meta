Implemente o sistema: AlgaPosts
Você deve desenvolver um sistema distribuído composto por dois microsserviços que se comunicam 
de forma assíncrona utilizando RabbitMQ. O sistema será responsável por receber publicações de texto (posts),
processar o conteúdo desses textos em segundo plano e armazenar o resultado do processamento.

O sistema deve permitir:

- Criar um novo post.
- Consultar os detalhes de um post.
- Listar posts com paginação.
- O processamento dos posts inclui a contagem de palavras no texto e o cálculo de um valor
estimado com base na quantidade de palavras.

1. Microsserviço: PostService
Expor uma API REST para criação e consulta de posts.
Enviar novos posts para a fila text-processor-service.post-processing.v1.q.
Consumir os resultados processados da fila post-service.post-processing-result.v1.q.
Armazenar o post e o resultado do processamento.
Utilizar H2 para persistência.
Gerar o id do post com UUID.
Vincular corretamente o resultado processado ao post original.
Endpoints
POST /api/posts:

Cria um novo post.
Envia dados do post para a fila.
Retorna 201 Created e um PostOutput no corpo.
GET /api/posts/{postId}:

Retorna PostOutput.
Retorna 200 OK em caso de sucesso.
Retorna 404 Not Found se o post não existir.
GET /api/posts:

Retorna uma lista paginada de PostSummaryOutput.
Suporta parâmetros page e size.
Retorna 200 OK com a estrutura:
{
  "page": 0,
  "size": 10,
  "totalElements": 45,
  "totalPages": 5,
  "content": [ /* lista de PostSummaryOutput */ ]
}
DTOs usados no PostService
PostInput - Modelo para criação:

{
  "title": "string",
  "body": "string",
  "author": "string"
}
PostOutput - Modelo detalhado de exibição:

{
  "id": "string",
  "title": "string",
  "body": "string",
  "author": "string",
  "wordCount": 123,
  "calculatedValue": 12.3
}
PostSummaryOutput - Modelo simplificado:

{
  "id": "string",
  "title": "string",
  "summary": "string",
  "author": "string"
}
Validações no PostService
title, body e author são obrigatórios.
body deve conter texto não vazio.
id deve ser UUID e único.
summary contém as 3 primeiras linhas do body.

2. Microsserviço: TextProcessorService
Consumir a fila text-processor-service.post-processing.v1.q.
Processar o campo body do post recebido.
Calcular:
A quantidade de palavras no corpo do texto.
O valor estimado (palavras * $0,10).
Enviar o resultado do processamento para a fila post-service.post-processing-result.v1.q.
Formato da mensagem consumida (fila text-processor-service.post-processing.v1.q)
{
  "postId": "string", //UUID
  "postBody": "string"
}
Formato da mensagem produzida (fila post-service.post-processing-result.v1.q)
{
  "postId": "string", //UUID
  "wordCount": 123,
  "calculatedValue": 12.3
}

3. Regras gerais para os dois microsserviços
Crie o tipo de Exchange que achar necessário.
Configure uma DLQ para cada fila.
Configure filas e exchanges via Java.
Sempre utilize DTOs nas comunicações REST e via mensageria.
Configure o serializador do Jackson para JSON nas mensagens.
Para enviar uma mensagem diretamente para uma fila sem Exchange nomeada, use:
rabbitTemplate.convertAndSend(nomeDaQueue, payloadDaMensagem)
4. Tarefas do Desafio
Implemente o PostService com endpoints REST e lógica de envio/consumo das filas.
Implemente o TextProcessorService com consumidor da fila de posts e produtor da fila de resultados.
Garanta a persistência correta dos dados no PostService, incluindo os campos processados.
Defina os DTOs de entrada e saída.
Garanta que as respostas HTTP estejam corretas (200, 404, 204).
Teste o fluxo completo com RabbitMQ em execução.
Dicas
Use logs para registrar e depurar a troca de mensagens.
Utilize o modelo de pacotes que preferir.
Crie classes Services se desejar.
Bom desafio!